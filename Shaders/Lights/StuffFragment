#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;

struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 color;
	float shininess;
};

uniform Material material;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 viewPos;


void main(){
	//diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = lightColor * (material.diffuse * diff);
	
	//ambient
	vec3 ambientColor = material.ambient * lightColor;
	
	//specular
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = (material.specular * spec)* lightColor;
	
	vec3 result = (ambientColor + diffuse + specular) * material.color;
	FragColor = vec4(result, 1.0);
}

